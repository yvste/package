{
    "collab_server" : "",
    "contents" : "#' calcualteRFM\n#'\n#' Calcualte the weight of an RFM score: recency, frequency, monetary\n#'\n# Arguments\n#' @param data - data\n#' @param r - recency\n#'\n#' @details\n#' \\code{data} blablabla\n#'\n#' @return Returns a RFM model\ncalculateRFM <- function(data, weight_recency=1, weight_frequency=1, weight_monetary=1){\n\n  # Ensure that the weights add up to one\n  weight_recency2 <- weight_recency/sum(weight_recency, weight_frequency, weight_monetary)\n  weight_frequency2 <- weight_frequency/sum(weight_recency, weight_frequency, weight_monetary)\n  weight_monetary2 <- weight_monetary/sum(weight_recency, weight_frequency, weight_monetary)\n\n  # RFM measures\n  max.Date <- max(transactions$TransDate)\n  temp <- data[,list(\n    recency = as.numeric(max.Date - max(TransDate)),\n    frequency = .N,\n    monetary = sum(PurchAmount)/.N),\n    by=\"Customer\"\n    ]\n\n  # RFM scores\n  temp <- temp[,list(Customer,\n    recency = as.numeric(cut2(-recency, g=3)),\n    frequency = as.numeric(cut2(frequency, g=3)),\n    monetary = as.numeric(cut2(monetary, g=3)))]\n\n  # Overall RFM score\n  temp[,finalscore:=weight_recency2*recency+weight_frequency2*frequency+weight_monetary2*monetary]\n\n  # RFM group\n  temp[,group:=round(finalscore)]\n\n  # Return final table\n  return(temp)\n}\n\n",
    "created" : 1486561166912.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2187797765",
    "id" : "714D080",
    "lastKnownWriteTime" : 1486563834,
    "last_content_update" : 1486563834682,
    "path" : "~/Desktop/Package/R/calculateRFM.R",
    "project_path" : "R/calculateRFM.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}